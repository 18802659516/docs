testing
[ { type: 'element',
    is: 'Polymer.Base',
    abstract: true,
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    desc: '`Polymer.Base` acts as a base prototype for all Polymer elements. It is composed via various calls to `Polymer.Base._addFeature()`.\n\nThe properties reflected here are the combined view of all features found in this library. There may be more properties added via other libraries, as well.',
    demos: [] },
  { type: 'element',
    desc: '\n\nThe `custom-style` extension of the native `<style>` element allows defining styles\nin the main document that can take advantage of several special features of\nPolymer\'s styling system:\n\nDocument styles defined in a `custom-style` will be shimmed to ensure they do\nnot leak into local DOM when running on browsers without non-native Shadow DOM.\nShadow DOM-specific `/deep/` and `::shadow` combinators will be shimmed on\nbrowsers without non-native Shadow DOM.\nCustom properties used by Polymer\'s shim for cross-scope styling\nmay be defined in an `custom-style`.\nAn `include` attribute may be specified to pull in style data from a\n`dom-module` matching the include attribute. By using `include`, style data\ncan be shared between multiple `custom-style` elements.\n\nExample:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <script src="components/webcomponentsjs/webcomponents-lite.js"></script>\n  <link rel="import" href="components/polymer/polymer.html">\n\n  <style is="custom-style">\n\n    /* Will be prevented from affecting local DOM of Polymer elements */\n{\n      box-sizing: border-box;\n    }\n\n    /* Can use /deep/ and ::shadow combinators */\n    body /deep/ .my-special-view::shadow #thing-inside {\n      background: yellow;\n    }\n\n    /* Custom properties that inherit down the document tree may be defined */\n    body {\n      --my-toolbar-title-color: green;\n    }\n\n  </style>\n  \n  \n  <dom-module id="shared-style">\n    <template>\n      <style>\n        :root {\n          --shared-background-color: #bada55;\n        }\n      </style>\n    </template>\n  </dom-module>\n  \n  <style is="custom-style" include="shared-style">\n    \n    body {\n      background-color: var(--shared-background-color);\n    }\n    \n  </style>\n</head>\n<body>\n\n    ...\n\n</body>\n</html>\n```\n\nNote, all features of `custom-style` are available when defining styles as part of Polymer elements (e.g. `<style>` elements within `<dom-module>`\'s used for defining Polymer elements. The `custom-style` extension should only be used for defining document styles, outside of a custom element\'s local DOM.\n\n',
    events: [],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [],
    observers: [],
    is: 'custom-style',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/custom-style.html' },
    contentHref: 'temp/polymer/src/lib/custom-style.html',
    demos: [] },
  { type: 'element',
    desc: '\nCreates a pseudo-custom-element that maps property values to bindings\nin DOM.\n\n`stamp` method creates an instance of the pseudo-element. The instance\nreferences a document-fragment containing the stamped and bound dom\nvia it\'s `root` property. \n \n   ',
    events: [],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [ 'Polymer.Templatizer' ],
    observers: [],
    is: 'dom-template',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/template/dom-template.html' },
    contentHref: 'temp/polymer/src/lib/template/dom-template.html',
    demos: [] },
  { type: 'element',
    desc: '\n\nThe `dom-repeat` element is a custom `HTMLTemplateElement` type extension that\nautomatically stamps and binds one instance of template content to each object\nin a user-provided array.  `dom-repeat` accepts an `items` property, and one\ninstance of the template is stamped for each item into the DOM at the location\nof the `dom-repeat` element.  The `item` property will be set on each instance\'s\nbinding scope, thus templates should bind to sub-properties of `item`.\n\nExample:\n\n```html\n<dom-module id="employee-list">\n\n  <template>\n\n    <div> Employee list: </div>\n    <template is="dom-repeat" items="{{employees}}">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n    </template>\n\n  </template>\n\n  <script>\n    Polymer({\n      is: \'employee-list\',\n      ready: function() {\n        this.employees = [\n            {first: \'Bob\', last: \'Smith\'},\n            {first: \'Sally\', last: \'Johnson\'},\n            ...\n        ];\n      }\n    });\n  </script>\n\n</dom-module>\n```\n\nNotifications for changes to items sub-properties will be forwarded to template\ninstances, which will update via the normal structured data notification system.\n\nMutations to the `items` array itself should me made using the Array\nmutation API\'s on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n`unshift`), and template instances will be kept in sync with the data in the\narray.\n\nEvents caught by event handlers within the `dom-repeat` template will be\ndecorated with a `model` property, which represents the binding scope for\neach template instance.  The model is an instance of Polymer.Base, and should\nbe used to manipulate data on the instance, for example\n`event.model.set(\'item.checked\', true);`.\n\nAlternatively, the model for a template instance for an element stamped by\na `dom-repeat` can be obtained using the `modelForElement` API on the\n`dom-repeat` that stamped it, for example\n`this.$.domRepeat.modelForElement(event.target).set(\'item.checked\', true);`.\nThis may be useful for manipulating instance data of event targets obtained\nby event handlers on parents of the `dom-repeat` (event delegation).\n\nA view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n`filter` and/or `sort` property.  This may be a string that names a function on\nthe host, or a function may be assigned to the property directly.  The functions\nshould implemented following the standard `Array` filter/sort API.\n\nIn order to re-run the filter or sort functions based on changes to sub-fields\nof `items`, the `observe` property may be set as a space-separated list of\n`item` sub-fields that should cause a re-filter/sort when modified.  If\nthe filter or sort function depends on properties not contained in `items`,\nthe user should observe changes to those properties and call `render` to update\nthe view based on the dependency change.\n\nFor example, for an `dom-repeat` with a filter of the following:\n\n```js\nisEngineer: function(item) {\n    return item.type == \'engineer\' || item.manager.type == \'engineer\';\n}\n```\n\nThen the `observe` property should be configured as follows:\n\n```html\n<template is="dom-repeat" items="{{employees}}"\n          filter="isEngineer" observe="type manager.type">\n```\n\n',
    events: [ [Object] ],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [ 'Polymer.Templatizer' ],
    observers: [ [Object] ],
    is: 'dom-repeat',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/template/dom-repeat.html' },
    contentHref: 'temp/polymer/src/lib/template/dom-repeat.html',
    demos: [] },
  { type: 'element',
    desc: '\nKeeping structured data in sync requires that Polymer understand the path\nassociations of data being bound.  The `array-selector` element ensures path\nlinkage when selecting specific items from an array (either single or multiple).\nThe `items` property accepts an array of user data, and via the `select(item)`\nand `deselect(item)` API, updates the `selected` property which may be bound to\nother parts of the application, and any changes to sub-fields of `selected`\nitem(s) will be kept in sync with items in the `items` array.  When `multi`\nis false, `selected` is a property representing the last selected item.  When\n`multi` is true, `selected` is an array of multiply selected items.\n\n```html\n<dom-module id="employee-list">\n\n  <template>\n\n    <div> Employee list: </div>\n    <template is="dom-repeat" id="employeeList" items="{{employees}}">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n        <button on-click="toggleSelection">Select</button>\n    </template>\n\n    <array-selector id="selector" items="{{employees}}" selected="{{selected}}" multi toggle></array-selector>\n\n    <div> Selected employees: </div>\n    <template is="dom-repeat" items="{{selected}}">\n        <div>First name: <span>{{item.first}}</span></div>\n        <div>Last name: <span>{{item.last}}</span></div>\n    </template>\n\n  </template>\n\n  <script>\n    Polymer({\n      is: \'employee-list\',\n      ready: function() {\n        this.employees = [\n            {first: \'Bob\', last: \'Smith\'},\n            {first: \'Sally\', last: \'Johnson\'},\n            ...\n        ];\n      },\n      toggleSelection: function(e) {\n        var item = this.$.employeeList.itemForElement(e.target);\n        this.$.selector.select(item);\n      }\n    });\n  </script>\n\n</dom-module>\n```\n',
    events: [],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [],
    observers: [],
    is: 'array-selector',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/template/array-selector.html' },
    contentHref: 'temp/polymer/src/lib/template/array-selector.html',
    demos: [] },
  { type: 'element',
    desc: '\nStamps the template iff the `if` property is truthy.\n\nWhen `if` becomes falsey, the stamped content is hidden but not\nremoved from dom. When `if` subsequently becomes truthy again, the content\nis simply re-shown. This approach is used due to its favorable performance\ncharacteristics: the expense of creating template content is paid only\nonce and lazily.\n\nSet the `restamp` property to true to force the stamped content to be\ncreated / destroyed when the `if` condition changes.\n   ',
    events: [ [Object] ],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [ 'Polymer.Templatizer' ],
    observers: [],
    is: 'dom-if',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/template/dom-if.html' },
    contentHref: 'temp/polymer/src/lib/template/dom-if.html',
    demos: [] },
  { type: 'element',
    desc: '\n\nPolymer\'s binding features are only available within templates that are managed\nby Polymer.  As such, these features are available in templates used to define\nPolymer elements, for example, but not for elements placed directly in the main\ndocument.\n\nIn order to use Polymer bindings without defining a new custom element, elements\nutilizing bindings may be wrapped with the `dom-bind` template extension.\nThis template will immediately stamp itself into the main document and bind\nelements to the template itself as the binding scope.\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <script src="components/webcomponentsjs/webcomponents-lite.js"></script>\n  <link rel="import" href="components/polymer/polymer.html">\n  <link rel="import" href="components/iron-ajax/iron-ajax.html">\n\n</head>\n<body>\n\n  <template is="dom-bind">\n\n    <iron-ajax url="http://..." lastresponse="{{data}}" auto></iron-ajax>\n\n    <template is="dom-repeat" items="{{data}}">\n        <div><span>{{item.first}}</span> <span>{{item.last}}</span></div>\n    </template>\n\n  </template>\n\n</body>\n</html>\n```\n\n',
    events: [ [Object] ],
    properties: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    behaviors: [],
    observers: [],
    is: 'dom-bind',
    scriptElement: 
     { nodeName: 'script',
       tagName: 'script',
       attrs: [],
       namespaceURI: 'http://www.w3.org/1999/xhtml',
       childNodes: [Object],
       parentNode: [Object],
       __location: [Object],
       __locationDetail: [Object],
       __ownerDocument: 'temp/polymer/src/lib/template/dom-bind.html' },
    contentHref: 'temp/polymer/src/lib/template/dom-bind.html',
    demos: [] } ]
